# Aula 4 - respondendo a duvidas

#### Como determinar as componentes principais para o grafico 2D ####
library(cluster)
data("USArrests")
df <- scale(USArrests)

pca_result <- princomp(df)#análise de componentes principais (PCA)

summary(pca_result)# Visualizando a proporção da variância explicada por cada componente principal

loadings(pca_result)[, 1:2]
# na Comp.1, a variável "Assault" tem uma influência positiva significativa, 
# enquanto na Comp.2, a variável "UrbanPop" tem uma influência negativa 
# significativa. Essa interpretação permite compreender quais variáveis 
# estão mais relacionadas a cada componente principal


biplot(pca_result, scale = 0)# Plot dos dois primeiros componentes principais

#### Aplicando K-means em n_trials, e calculando a estabilidade dos clusters ####

library(stats)
library(cluster)
library(fpc)

kmeans_stability <- function(data, n_clusters, n_times) {
  stable_cluster_count <- 0
  
  for (i in 1:n_times) {
    set.seed(i)
    kmeans_result <- kmeans(data, centers = n_clusters, iter.max = 10, nstart = i)
    labels <- kmeans_result$cluster
    
    if (i == 1) {
      initial_labels <- labels
    } else {
      if (all(labels == initial_labels)) {
        stable_cluster_count <- stable_cluster_count + 1
      }
    }
  }
  
  stability_percentage <- (stable_cluster_count / n_times) * 100
  return(stability_percentage)
}

# Parâmetros
n_clusters <- 4
n_times <- 1000

stability_percentage <- kmeans_stability(df, n_clusters, n_times)
cat("Porcentagem de estabilidade dos clusters:", format(stability_percentage, digits = 2), "%\n")



# função para executar K-Means e calcular estabilidade, Silhouette Score e inércia
kmeans_metrics <- function(data, n_clusters, n_times) {
  stability_percentage <- 0
  silhouette_scores <- numeric(n_times)
  inertias <- numeric(n_times)
  
  for (i in 1:n_times) {
    kmeans_result <- kmeans(data, centers = n_clusters, iter.max = 10, nstart = i)
    labels <- kmeans_result$cluster
    
    if (i == 1) {
      initial_labels <- labels
    } else {
      if (all(labels == initial_labels)) {
        stability_percentage <- stability_percentage + 1
      }
    }
    
    silhouette_scores[i] <- mean(silhouette(labels, dist(data)))
    inertias[i] <- kmeans_result$tot.withinss
  }
  
  stability_percentage <- (stability_percentage / n_times) * 100
  return(list(
    stability = stability_percentage,
    silhouette = mean(silhouette_scores),
    inertia = mean(inertias)
  ))
}

n_clusters <- 4
n_times <- 10000

metrics <- kmeans_metrics(df, n_clusters, n_times)
cat("Porcentagem de estabilidade dos clusters:", format(metrics$stability, digits = 2), "%\n")
cat("Silhouette Score:", format(metrics$silhouette, digits = 3), "\n")
cat("Inércia:", format(metrics$inertia, digits = 3), "\n")
